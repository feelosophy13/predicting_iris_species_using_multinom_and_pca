#### split data into train and test
set.seed(123)
split <- sample.split(iris$Species)
split <- sample.split(iris$Species, SplitRatio=2/3)
split <- sample.split(iris$species, SplitRatio=2/3)
train <- iris[split=TRUE, ]
train <- iris[split==TRUE, ]
test <- iris[split==FALSE, ]
dim(train)
dim(test)
table(train$species)
tables(test$species)
table(test$species)
dat <- as.matrix(train[ , -5])
pca <- prcomp(dat, retx=TRUE, center=TRUE, scale=TRUE)
class(pca)
summary(pca)
head(pca$x)
head(data)
head(dat)
head(pca$x)
plot(pca, type='l')
str(pca)
head(dat)
head(pca$x)
pc <- c(1,2)
plot(pca$x[,pc[1]], pca$x[,pc[2]], col=COLOR[SPP], cex=PCH[1], xlab=paste0("PC ", pc[1], " (", round(pca$sdev[pc[1]]/sum(pca$sdev)*100,0), "%)"), ylab=paste0("PC ", pc[2], " (", round(pca$sdev[pc[2]]/sum(pca$sdev)*100,0), "%)"))
pc <- c(1,2)
SPP <- iris$Species
COLOR <- c(2:4)
PCH <- c(1,16)
plot(pca$x[,pc[1]], pca$x[,pc[2]], col=COLOR[SPP], cex=PCH[1], xlab=paste0("PC ", pc[1], " (", round(pca$sdev[pc[1]]/sum(pca$sdev)*100,0), "%)"), ylab=paste0("PC ", pc[2], " (", round(pca$sdev[pc[2]]/sum(pca$sdev)*100,0), "%)"))
points(pred.setosa[,pc[1]], pred.setosa[,pc[2]], col=COLOR[levels(SPP)=="setosa"], pch=PCH[2])
plot(pca$x[,pc[1]], pca$x[,pc[2]], col=COLOR[SPP], cex=PCH[1], xlab=paste0("PC ", pc[1], " (", round(pca$sdev[pc[1]]/sum(pca$sdev)*100,0), "%)"), ylab=paste0("PC ", pc[2], " (", round(pca$sdev[pc[2]]/sum(pca$sdev)*100,0), "%)"))
library(ggplot)
library(ggplot2)
head(pca)
plot(pca$x[ , pc[1]], pca$x[, pc[2]]
)
trainPCA <- data.frame(pca$x, train[ , 5])
plot(trainPCA$PC1, trainPCA$PC2)
plot(trainPCA$PC1, trainPCA$PC2, col=trainPCA$species)
plot(trainPCA$PC1, trainPCA$PC2, col=as.factor(trainPCA$species))
table(trainPCA$species)
head(trainPCA)
trainPCA <- data.frame(cbind(pca$x, train[ , 5]))
plot(trainPCA$PC1, trainPCA$PC2, col=as.factor(trainPCA$species))
head(trainPCA)
plot(trainPCA$PC1, trainPCA$PC2, col=as.factor(trainPCA$V5))
head(plot)
head(iris)
plot(train$sepal.length, train$sepal.width, col=train$species)
pair(train[, 1:4])
pairs(train[, 1:4])
pairs(train[, 1:4], col=train$species)
?pairs
pairs(train[, 1:4], col=train$species, upper.panel=NULL)
head(train)
setosa.mean <- apply(iris[iris$Species=="setosa",-5], 2, mean)
setosa.mean
setosa.mean <- apply(iris[iris$species=="setosa",-5], 2, mean)
setosa.mean
rm(setosa.mean)
summary(train)
library(psych)
describe(train)
?describe
describe(train, by=species)
?describeBy
describe(train, by=species)
describeBy(train, by=species)
describeBy(train, by=train$species)
describeBy(train, group=species)
describeBy(train, group=train$species)
setosaMean <- apply(train[train$species=="setosa", -5], 2, mean)
versicolorMean <- apply(train[train$species=="versicolor", -5], 2, mean)
virginicaMean <- apply(train[train$species=="virginica", -5], 2, mean)
mean <- rbind(setosaMean, versicolorMean)
mean
rm('setosaMean', 'versicolorMean', 'virginicaMean')
setosa.mean <- apply(train[train$species=="setosa", -5], 2, mean)
versicolor.mean <- apply(train[train$species=="versicolor", -5], 2, mean)
virginica.mean <- apply(train[train$species=="virginica", -5], 2, mean)
rm(mean)
means <- rbind(setosa.mean, versicolor.mean, virginica.mean)
means
pairs(train[, 1:4], col=train$species, upper.panel=NULL)
dat <- as.matrix(train[ , -5])
pca <- prcomp(dat, retx=TRUE, center=TRUE, scale=TRUE)
class(pca)
summary(pca)
head(dat)
head(pca$x)
plot(pca, type='l')
rm(trainPCA)
train.pca <- data.frame(cbind(pca$x, train[ , 5]))
plot(train$sepal.length, train$sepal.width, col=train$species)
plot(trainPCA$PC1, trainPCA$PC2, col=as.factor(trainPCA$V5))
rm(train.pca)
trainPCA <- data.frame(cbind(pca$x, train[ , 5]))
plot(trainPCA$PC1, trainPCA$PC2, col=as.factor(trainPCA$V5))
pairs(trainPCA)
pairs(trainPCA[ , -5])
pairs(trainPCA[ , -5], col=trainPCA$species)
pairs(trainPCA[ , -5], col=trainPCA$V5)
plot(pca$x[,pc[1]], pca$x[,pc[2]], col=COLOR[SPP], cex=PCH[1], xlab=paste0("PC ", pc[1], " (", round(pca$sdev[pc[1]]/sum(pca$sdev)*100,0), "%)"), ylab=paste0("PC ", pc[2], " (", round(pca$sdev[pc[2]]/sum(pca$sdev)*100,0), "%)"))
means
cor(train[ , 1:4])
round(cor(train[ , 1:4]), 2)
?cor
round(cor(train[ , 1:4]), 2)
lower.tri(round(cor(train[ , 1:4]), 2))
round(cor(train[ , 1:4]), 2)
lower.tri(round(cor(train[ , 1:4]), 2))
round(cor(train[ , 1:4]), 2)[lower.tri(round(cor(train[ , 1:4]), 2))]
corMatrix <- round(cor(train[ , 1:4]), 2)
upper.tri(corMatrix) <- NA
upper.tri(corMatrix)
upper.tri(corMatrix) <- NA
corMatrix[upper.tri(corMatrix)] <- NA
corMatrix
corMatrix[upper.tri(corMatrix)] <- ''
corMatrix
corMatrix[upper.tri(corMatrix)] <- NA
corMatrix
corMatrix <- round(cor(train[ , 1:4]), 2)
corMatrix[upper.tri(corMatrix)] <- NA
corMatrix
dat <- as.matrix(train[ , -5])
pca <- prcomp(dat, retx=TRUE, center=TRUE, scale=TRUE)
## summary
class(pca)
summary(pca)
head(dat)
head(pca$x)
## plot
plot(pca, type='l')
trainPCA <- data.frame(cbind(pca$x, train[ , 5]))
plot(trainPCA$PC1, trainPCA$PC2, col=as.factor(trainPCA$V5))
rm(list = ls())
setwd('/Users/hawooksong/Desktop/pca')
#### import libraries and data
rm(list = ls())
setwd('/Users/hawooksong/Desktop/pca')
#### import libraries and data
library(caret)
library(psych)  # for describeBy()
library(ggplot2)
data(iris)
#### lower column names
colnames(iris) <- tolower(colnames(iris))
#### split data into train and test
set.seed(123)
split <- sample.split(iris$species, SplitRatio=2/3)
train <- iris[split==TRUE, ]
test <- iris[split==FALSE, ]
## sepal and petal measurements means by species
setosa.mean <- apply(train[train$species=="setosa", -5], 2, mean)
versicolor.mean <- apply(train[train$species=="versicolor", -5], 2, mean)
virginica.mean <- apply(train[train$species=="virginica", -5], 2, mean)
means <- rbind(setosa.mean, versicolor.mean, virginica.mean)
means
## other comprehensive summary statistics by species
describeBy(train, group=train$species)
pairs(train[, 1:4], col=train$species, upper.panel=NULL)
## correlations
corMatrix <- round(cor(train[ , 1:4]), 2)
corMatrix[upper.tri(corMatrix)] <- NA
corMatrix
corMatrix
table(train$species)
unique(train$species)
for (s in species) {
subDF <- subset(train, species==s)
corMatrix <- round(cor(subDF[ , 1:4]), 2)
corMatrix[upper.tri(corMatrix)] <- NA
corMatrix
}
species <- as.character(unique(train$species))
for (s in species) {
subDF <- subset(train, species==s)
corMatrix <- round(cor(subDF[ , 1:4]), 2)
corMatrix[upper.tri(corMatrix)] <- NA
corMatrix
}
for (s in species) {
subDF <- subset(train, species==s)
corMatrix <- round(cor(subDF[ , 1:4]), 2)
corMatrix[upper.tri(corMatrix)] <- NA
print(s)
print(corMatrix)
}
for (s in species) {
subDF <- subset(train, species==s)
corMatrix <- round(cor(subDF[ , 1:4]), 2)
corMatrix[upper.tri(corMatrix)] <- NA
print(s)
print(corMatrix)
print('')
}
noquote(corMatrix)
for (s in species) {
subDF <- subset(train, species==s)
corMatrix <- round(cor(subDF[ , 1:4]), 2)
corMatrix[upper.tri(corMatrix)] <- NA
noquote(s)
print(corMatrix)
}
cat(s)
for (s in species) {
subDF <- subset(train, species==s)
corMatrix <- round(cor(subDF[ , 1:4]), 2)
corMatrix[upper.tri(corMatrix)] <- NA
cat(s)
print(corMatrix)
}
for (s in species) {
subDF <- subset(train, species==s)
corMatrix <- round(cor(subDF[ , 1:4]), 2)
corMatrix[upper.tri(corMatrix)] <- NA
cat(s)
print(corMatrix)
cat('------')
}
for (s in species) {
subDF <- subset(train, species==s)
corMatrix <- round(cor(subDF[ , 1:4]), 2)
corMatrix[upper.tri(corMatrix)] <- NA
cat(s)
print(corMatrix)
cat('------\n')
}
for (s in species) {
subDF <- subset(train, species==s)
corMatrix <- round(cor(subDF[ , 1:4]), 2)
corMatrix[upper.tri(corMatrix)] <- NA
cat(s)
print(corMatrix)
cat('------------------------\n')
}
for (s in species) {
subDF <- subset(train, species==s)
corMatrix <- round(cor(subDF[ , 1:4]), 2)
corMatrix[upper.tri(corMatrix)] <- NA
cat(paste0(s, '\n'))
print(corMatrix)
cat('------------------------\n')
}
for (s in species) {
subDF <- subset(train, species==s)
corMatrix <- round(cor(subDF[ , 1:4]), 2)
corMatrix[upper.tri(corMatrix)] <- NA
cat(s)
print(corMatrix)
cat('------------------------\n')
}
features_train <- as.matrix(train[ , -5])
pca_train <- prcomp(features_train, retx=TRUE, center=TRUE, scale=TRUE)
class(pca_train)
summary(pca_train)
head(features_train)
head(pca_train$x)
## plot
plot(pca, type='l')
plot(pca_train, type='l')
rm(pca_train)
features_train <- as.matrix(train[ , -5])
pc_features_train <- prcomp(features_train, retx=TRUE, center=TRUE, scale=TRUE)
pc_features_train <- prcomp(features_train, retx=TRUE, center=TRUE, scale=TRUE)  # principle components of features
class(pca_train)
class(pc_features_train)
class(pc_features_train)
summary(pca_train)
summary(pc_features_train)
head(pc_features_train)
head(features_train)
head(pc_features_train$x)
plot(pc_features_train, type='l')
pca_train <- data.frame(cbind(pc_features_train$x, train[ , 5]))
head(pca_train)
head(train)
train[ , 5]
head(train)
head(pca_train)
head(train)
head(pca_train)
pca_train <- data.frame(cbind(pc_features_train$x, as.character(train[ , 5])))
head(pca_train)
pca_train <- cbind(pc_features_train$x, as.character(train[ , 5]))
head(pca_train)
pca_train <- data.frame(cbind(pc_features_train$x, as.character(train[ , 5])))
head(train)
colnames(pca_train)[5]
colnames(pca_train)[5] <- 'species'
head(train)
head(pca_train)
plot(pca_train$PC1, pca_train$PC2, col=as.factor(pca_train$species))
points(pca_train$PC1, pca_train$PC2, col=as.factor(pca_train$species))
points(1, 2)
point(1, 2)
points(1, 2)
points(1, 2)
plot(2, 3)
plot(pca_train$PC1, pca_train$PC2)
iris$species <- as.character(iris$species)
set.seed(123)
split <- sample.split(iris$species, SplitRatio=2/3)
train <- iris[split==TRUE, ]
test <- iris[split==FALSE, ]
#### analysis of data
## sepal and petal measurements means by species
setosa.mean <- apply(train[train$species=="setosa", -5], 2, mean)
versicolor.mean <- apply(train[train$species=="versicolor", -5], 2, mean)
virginica.mean <- apply(train[train$species=="virginica", -5], 2, mean)
means <- rbind(setosa.mean, versicolor.mean, virginica.mean)
means
## other comprehensive summary statistics by species
describeBy(train, group=train$species)
## pairs for all metrics
pairs(train[, 1:4], col=train$species, upper.panel=NULL)
## correlations (should be used with caution since there are only a few dozen data points)
species <- as.character(unique(train$species))
for (s in species) {
subDF <- subset(train, species==s)
corMatrix <- round(cor(subDF[ , 1:4]), 2)
corMatrix[upper.tri(corMatrix)] <- NA
cat(s)
print(corMatrix)
cat('------------------------\n')
}
#### create prcomp object from the first 4 columns of the data set
## create principle components of original features (prcomp object)
features_train <- as.matrix(train[ , -5])  # original features
pc_features_train <- prcomp(features_train, retx=TRUE, center=TRUE, scale=TRUE)  # principle components of features
## summary
class(pc_features_train)
summary(pc_features_train)
## original vs. pca
head(features_train)
head(pc_features_train$x)
## plot
plot(pc_features_train, type='l')
rm(list = ls())
setwd('/Users/hawooksong/Desktop/pca')
#### import libraries and data
library(caret)
library(psych)  # for describeBy()
library(ggplot2)
data(iris)
#### preprocess data
## lower column names
colnames(iris) <- tolower(colnames(iris))
## drop factor for the outcome variables
iris$species <- as.character(iris$species)
#### split data into train and test
set.seed(123)
split <- sample.split(iris$species, SplitRatio=2/3)
train <- iris[split==TRUE, ]
test <- iris[split==FALSE, ]
dim(train)
dim(test)
table(train$species)
table(test$species)
#### analysis of data
## sepal and petal measurements means by species
setosa.mean <- apply(train[train$species=="setosa", -5], 2, mean)
versicolor.mean <- apply(train[train$species=="versicolor", -5], 2, mean)
virginica.mean <- apply(train[train$species=="virginica", -5], 2, mean)
means <- rbind(setosa.mean, versicolor.mean, virginica.mean)
means
## other comprehensive summary statistics by species
describeBy(train, group=train$species)
## pairs for all metrics
pairs(train[, 1:4], col=train$species, upper.panel=NULL)
## correlations (should be used with caution since there are only a few dozen data points)
describeBy(train, group=train$species)
describeBy(train, group=as.factor(train$species))
str(train)
train$species <- as.factor(train$species)
describeBy(train, group=train$species)
pairs(train[, 1:4], col=train$species, upper.panel=NULL)
## correlations (should be used with caution since there are only a few dozen data points)
species <- as.character(unique(train$species))
for (s in species) {
subDF <- subset(train, species==s)
corMatrix <- round(cor(subDF[ , 1:4]), 2)
corMatrix[upper.tri(corMatrix)] <- NA
cat(s)
print(corMatrix)
cat('------------------------\n')
}
features_train <- as.matrix(train[ , -5])  # original features
pc_features_train <- prcomp(features_train, retx=TRUE, center=TRUE, scale=TRUE)  # principle components of features
class(pc_features_train)
summary(pc_features_train)
head(features_train)
head(pc_features_train$x)
## plot
plot(pc_features_train, type='l')
pca_train <- data.frame(cbind(pc_features_train$x, as.character(train[ , 5])))
colnames(pca_train)[5] <- 'species'
head(train)
head(pca_train)
summary(pc_features_train)
logisModel <- glm(species ~ PC1 + PC2, data=pca_train, family='binomial')
summary(logisModel)
str(pca_train)
pca_train <- as.data.frame(cbind(pc_features_train$x, as.character(train[ , 5])))
str(pca_train)
pca_train <- pc_features_train$x
pca_train <- pc_features_train$x
pca_train$species <- train[ , 5]
pca_train <- pc_features_train$x
str(pca_train)
head(pca_train)
class(pc_features_train$x)
pca_train <- as.data.frame(pc_features_train$x)
pca_train$species <- train[ , 5]
head(train)
head(pca_train)
str(pca_train)
logisModel <- glm(species ~ PC1 + PC2, data=pca_train, family='binomial')
summary(logisModel)
rm(logisModel)
head(train)
summary(model)
model <- glm(species ~ ., data=train, family=binomial)
summary(model)
rm(model)
model <- multinom(species ~ ., data=train)
summary(model)
x <- predict(model, newdata=test)
head(x)
table(x, test$species)
preds <- predict(model, newdata=test)
table(preds, test$species)
confMatrix <- table(preds, test$species)
confMatrix
model_pca <- multinom(species ~ PC1 + PC2, data=pca_train)
summary(model_pca)
rm(pca_train)
#### create a new training df with principle components (instead of with original features)
train_pca <- as.data.frame(pc_features_train$x)
train_pca$species <- train[ , 5]
head(train)
head(train_pca)
#### build a logistic regression model using the principle components from the training data set
model_pca <- multinom(species ~ PC1 + PC2, data=train_pca)
summary(model_pca)
test_pca <- predict(model_pca, newdata=test)
head(test)
head(test)
test_pca <- predict(model_pca, newdata=test[ , -5])
test_pca <- predict(pc_features_train, newdata=test[ , -5])
head(test_pca)
test_pca$species <- test$species
test_pca <- predict(pc_features_train, newdata=test[ , -5])
class(test_pca)
test_pca <- as.data.frame(test_pca)  # data frame
test_pca$species <- test$species
head(test)
head(test_pca)
preds_pca <- predict(model_pca, newdata=test_pca)
preds_pca <- predict(model_pca, newdata=test_pca)
confMatrix_pca <- table(preds_pca, test$species)
confMatrix_pca
rm(list = ls())
setwd('/Users/hawooksong/Desktop/pca')
#### import libraries and data
library(caret)
library(psych)  # for describeBy()
library(ggplot2)
data(iris)
#### preprocess data
library(caret)
library(psych)  # for describeBy()
#### preprocess data
## lower column names
colnames(iris) <- tolower(colnames(iris))
## drop factor for the outcome variables
# iris$species <- as.character(iris$species)
#### split data into train and test
set.seed(123)
split <- sample.split(iris$species, SplitRatio=2/3)
train <- iris[split==TRUE, ]
test <- iris[split==FALSE, ]
dim(train)
dim(test)
table(train$species)
table(test$species)
#### analysis of data
## sepal and petal measurements means by species
setosa.mean <- apply(train[train$species=="setosa", -5], 2, mean)
versicolor.mean <- apply(train[train$species=="versicolor", -5], 2, mean)
virginica.mean <- apply(train[train$species=="virginica", -5], 2, mean)
means <- rbind(setosa.mean, versicolor.mean, virginica.mean)
means
## other comprehensive summary statistics by species
train$species <- as.factor(train$species)
describeBy(train, group=train$species)
## pairs for all metrics
pairs(train[, 1:4], col=train$species, upper.panel=NULL)
## correlations (should be used with caution since there are only a few dozen data points)
species <- as.character(unique(train$species))
for (s in species) {
subDF <- subset(train, species==s)
corMatrix <- round(cor(subDF[ , 1:4]), 2)
corMatrix[upper.tri(corMatrix)] <- NA
cat(s)
print(corMatrix)
cat('------------------------\n')
}
